#!{{ lookPath "bash" }}

LISTNVIDIA=(
    libva
    libva-nvidia-driver-git
    linux-headers
    nvidia-dkms
    nvidia-settings
)

cat << EOF >> ~/.bashrc
bash $HOME/bin/change-wallpaper.sh
neowofetch --gap -30 --ascii "\$(fortune -s | pokemonsay -w 30)"
EOF

{{ if eq .chezmoi.os "darwin" }}

# yabai sudoers setting
echo "$(whoami) ALL=(root) NOPASSWD: sha256:$(shasum -a 256 $(which yabai) | cut -d " " -f 1) $(which yabai) --load-sa" | sudo tee /private/etc/sudoers.d/yabai

# A bootplug to match the binary format so that yabai can inject code into the Dock of arm64 binaries.
if [[ $(uname -m) == 'arm64' ]]; then
    sudo nvram boot-args=-arm64e_preview_abi
fi

# Write default
wait_yn "${YELLOW}ACITION${RESET} - Would you like to write default?"
if [[ $YN = y ]] ; then
    echo "${CYAN}NOTE${RESET} - Writing default."
    source $BIN/parse-plist
fi

# Enable services
yabai --start-service
skhd --start-service

# Generate misc file
sudo ln -s $HOME/Documents $HOME/Documents-ln
sudo ln -s $HOME/Downloads $HOME/Downloads-ln
sudo ln -s $HOME/ $HOME/$USER-ln
{{ end }}

{{ if eq .chezmoi.os "linux" }}

mkdir -r $HOME/Documents $HOME/Downloads $HOME/Pictures
chmod +x $HOME/.config/polybar/scripts/*
chmod +x $HOME/bin/*
sudo gpasswd -a $USER input
chsh -s $(which zsh) $USER

# Setup Nvidia if found
if lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia ; then
    for app in ${LISTNVIDIA[@]} ; do
        yay -S --noconfirm --needed $app
    done
    sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
    sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
    echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf
    echo -e "WLR_NO_HARDWARE_CURSORS=1" | sudo tee -a /etc/environment
fi

sudo sed -i -e "/^ *#DefaultTimeoutStartSec=90s/c\ DefaultTimeoutStartSec=10s" /etc/systemd/system.conf
sudo sed -i -e "/^ *#DefaultTimeoutStopSec=90s/c\ DefaultTimeoutStopSec=10s" /etc/systemd/system.conf
sudo sed -i -e '/^ *exec -a/c\exec -a "$0" "$HERE/chrome" "$@" --gtk-version=4 --ozone-platform-hint=auto --enable-gpu-rasterization --enable-zero-copy \
--enable-features=TouchpadOverscrollHistoryNavigation --disable-smooth-scrolling --enable-fluent-scrollbars' /opt/google/chrome/google-chrome

# TverRec settings
sed -i -e "/^\$script:downloadBaseDir = ''/c\$script:downloadBaseDir = '/data/data/com.termux/files/home/storage/movies'" $HOME/TVerRec*/conf/user_setting.ps1
sed -i -e "/^\$script:downloadWorkDir = ''/c\$script:downloadWorkDir = '/tmp'" $HOME/TVerRec*/conf/user_setting.ps1
sed -i -e "/^\$script:saveBaseDir = ''/c\$script:saveBaseDir = '/data/data/com.termux/files/home/storage/movies'" $HOME/TVerRec*/conf/user_setting.ps1
sed -i -e "/^\$script:simplifiedValidation = \$false/c\$script:simplifiedValidation = \$true" $HOME/TVerRec*/conf/user_setting.ps1
sed -i -e "/^\$script:disableValidation = \$false/c\$script:disableValidation = \$true" $HOME/TVerRec*/conf/user_setting.ps1

cat << EOF | sudo tee -a /etc/systemd/network/*.network
IPv6PrivacyExtensions=true
IgnoreCarrierLoss=3s
EOF

cat << EOF | sudo tee -a /etc/environment
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx
EOF

cat << EOF | tee -a ~/.xsessionrc
xinput set-prop 11 318 1
xinput --set-prop "Apple SPI Touchpad" "Coordinate Transformation Matrix" 3 0 0 0 3 0 0 0 1
EOF

cat << EOF | sudo tee -a /etc/X11/xorg.conf.d/51-synaptics-tweaks.conf
Section "InputClass"
  Identifier "touchpad"
  Driver "synaptics"
  MatchIsTouchpad "on"
    Option "Tapping" "True"
    Option "TappingDrag" "True"
    Option "DisableWhileTyping" "True"
    Option "CornerCoasting" "0"
    Option "CoastingSpeed" "20"
    Option "CoastingFriction" "50"
EndSection
EOF



{{ end }}
